// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: loyalty_accounting/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoyaltyAccountingService_CreateAccount_FullMethodName      = "/api.LoyaltyAccountingService/CreateAccount"
	LoyaltyAccountingService_CreateTransaction_FullMethodName  = "/api.LoyaltyAccountingService/CreateTransaction"
	LoyaltyAccountingService_UpdateAccount_FullMethodName      = "/api.LoyaltyAccountingService/UpdateAccount"
	LoyaltyAccountingService_EarnPoints_FullMethodName         = "/api.LoyaltyAccountingService/EarnPoints"
	LoyaltyAccountingService_RedeemPoints_FullMethodName       = "/api.LoyaltyAccountingService/RedeemPoints"
	LoyaltyAccountingService_RefundEarnedPoints_FullMethodName = "/api.LoyaltyAccountingService/RefundEarnedPoints"
	LoyaltyAccountingService_RefundRedeemPoints_FullMethodName = "/api.LoyaltyAccountingService/RefundRedeemPoints"
)

// LoyaltyAccountingServiceClient is the client API for LoyaltyAccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyAccountingServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	EarnPoints(ctx context.Context, in *EarnPointsRequest, opts ...grpc.CallOption) (*EarnPointsResponse, error)
	RedeemPoints(ctx context.Context, in *RedeemPointsRequest, opts ...grpc.CallOption) (*RedeemPointsResponse, error)
	RefundEarnedPoints(ctx context.Context, in *RefundEarnedPointsRequest, opts ...grpc.CallOption) (*RefundEarnedPointsResponse, error)
	RefundRedeemPoints(ctx context.Context, in *RefundRedeemPointsRequest, opts ...grpc.CallOption) (*RefundRedeemPointsResponse, error)
}

type loyaltyAccountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyAccountingServiceClient(cc grpc.ClientConnInterface) LoyaltyAccountingServiceClient {
	return &loyaltyAccountingServiceClient{cc}
}

func (c *loyaltyAccountingServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) EarnPoints(ctx context.Context, in *EarnPointsRequest, opts ...grpc.CallOption) (*EarnPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EarnPointsResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_EarnPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) RedeemPoints(ctx context.Context, in *RedeemPointsRequest, opts ...grpc.CallOption) (*RedeemPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemPointsResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_RedeemPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) RefundEarnedPoints(ctx context.Context, in *RefundEarnedPointsRequest, opts ...grpc.CallOption) (*RefundEarnedPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundEarnedPointsResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_RefundEarnedPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyAccountingServiceClient) RefundRedeemPoints(ctx context.Context, in *RefundRedeemPointsRequest, opts ...grpc.CallOption) (*RefundRedeemPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundRedeemPointsResponse)
	err := c.cc.Invoke(ctx, LoyaltyAccountingService_RefundRedeemPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyAccountingServiceServer is the server API for LoyaltyAccountingService service.
// All implementations must embed UnimplementedLoyaltyAccountingServiceServer
// for forward compatibility.
type LoyaltyAccountingServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	EarnPoints(context.Context, *EarnPointsRequest) (*EarnPointsResponse, error)
	RedeemPoints(context.Context, *RedeemPointsRequest) (*RedeemPointsResponse, error)
	RefundEarnedPoints(context.Context, *RefundEarnedPointsRequest) (*RefundEarnedPointsResponse, error)
	RefundRedeemPoints(context.Context, *RefundRedeemPointsRequest) (*RefundRedeemPointsResponse, error)
	mustEmbedUnimplementedLoyaltyAccountingServiceServer()
}

// UnimplementedLoyaltyAccountingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoyaltyAccountingServiceServer struct{}

func (UnimplementedLoyaltyAccountingServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) EarnPoints(context.Context, *EarnPointsRequest) (*EarnPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnPoints not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) RedeemPoints(context.Context, *RedeemPointsRequest) (*RedeemPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemPoints not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) RefundEarnedPoints(context.Context, *RefundEarnedPointsRequest) (*RefundEarnedPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundEarnedPoints not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) RefundRedeemPoints(context.Context, *RefundRedeemPointsRequest) (*RefundRedeemPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundRedeemPoints not implemented")
}
func (UnimplementedLoyaltyAccountingServiceServer) mustEmbedUnimplementedLoyaltyAccountingServiceServer() {
}
func (UnimplementedLoyaltyAccountingServiceServer) testEmbeddedByValue() {}

// UnsafeLoyaltyAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyAccountingServiceServer will
// result in compilation errors.
type UnsafeLoyaltyAccountingServiceServer interface {
	mustEmbedUnimplementedLoyaltyAccountingServiceServer()
}

func RegisterLoyaltyAccountingServiceServer(s grpc.ServiceRegistrar, srv LoyaltyAccountingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoyaltyAccountingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoyaltyAccountingService_ServiceDesc, srv)
}

func _LoyaltyAccountingService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_EarnPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).EarnPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_EarnPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).EarnPoints(ctx, req.(*EarnPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_RedeemPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).RedeemPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_RedeemPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).RedeemPoints(ctx, req.(*RedeemPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_RefundEarnedPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundEarnedPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).RefundEarnedPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_RefundEarnedPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).RefundEarnedPoints(ctx, req.(*RefundEarnedPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyAccountingService_RefundRedeemPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRedeemPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyAccountingServiceServer).RefundRedeemPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyAccountingService_RefundRedeemPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyAccountingServiceServer).RefundRedeemPoints(ctx, req.(*RefundRedeemPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoyaltyAccountingService_ServiceDesc is the grpc.ServiceDesc for LoyaltyAccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoyaltyAccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LoyaltyAccountingService",
	HandlerType: (*LoyaltyAccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _LoyaltyAccountingService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _LoyaltyAccountingService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _LoyaltyAccountingService_UpdateAccount_Handler,
		},
		{
			MethodName: "EarnPoints",
			Handler:    _LoyaltyAccountingService_EarnPoints_Handler,
		},
		{
			MethodName: "RedeemPoints",
			Handler:    _LoyaltyAccountingService_RedeemPoints_Handler,
		},
		{
			MethodName: "RefundEarnedPoints",
			Handler:    _LoyaltyAccountingService_RefundEarnedPoints_Handler,
		},
		{
			MethodName: "RefundRedeemPoints",
			Handler:    _LoyaltyAccountingService_RefundRedeemPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loyalty_accounting/api/api.proto",
}
